basePath: /
definitions:
  controllers.AuthenticateVoterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.AuthenticateVoterResponse:
    properties:
      access_token:
        type: string
    type: object
  controllers.CreatePollRequest:
    properties:
      options:
        items:
          type: string
        minItems: 2
        type: array
      title:
        maxLength: 100
        minLength: 5
        type: string
    required:
    - options
    - title
    type: object
  controllers.Error:
    properties:
      message:
        type: string
    type: object
  controllers.RegisterVoterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  polls_presenter.FetchPollsResponse:
    properties:
      id:
        type: string
      options:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  polls_presenter.GetPollByIdResponse:
    properties:
      id:
        type: string
      options:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
host: localhost:3333
info:
  contact:
    email: nito.ba.dev@gmail.com
    name: Bruno Alves
    url: https://github.com/nitoba
  description: A Poll Voting API in Golang
  license:
    name: NitoDev
    url: https://github.com/nitoba
  termsOfService: https://swagger.io/terms/
  title: Poll Voting API
  version: "1.0"
paths:
  /auth/authenticate:
    post:
      consumes:
      - application/json
      description: Authenticate voters in the API
      parameters:
      - description: voter credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthenticateVoterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AuthenticateVoterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      summary: Authenticate Voters
      tags:
      - voters
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new voters in the API
      parameters:
      - description: voter credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterVoterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      summary: Register Voters
      tags:
      - voters
  /polls:
    get:
      consumes:
      - application/json
      description: Fetch polls in the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/polls_presenter.FetchPollsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      security:
      - ApiKeyAuth: []
      summary: Fetch Polls
      tags:
      - polls
    post:
      consumes:
      - application/json
      description: Create polls in the API
      parameters:
      - description: poll data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.CreatePollRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Polls
      tags:
      - polls
  /polls/{pollId}:
    get:
      consumes:
      - application/json
      description: Get poll by ID in the API
      parameters:
      - description: poll id
        in: path
        name: pollId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/polls_presenter.GetPollByIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Poll by ID
      tags:
      - polls
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
